class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        if (initial.empty()) return 0;
        int n = graph.size();
        vector<int> fa(n, -1);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (graph[i][j]) Union(i, j, fa);
            }
        }
        sort(initial.begin(), initial.end());
        map<int, pair<int, int>> mp;//fa, <cnt, minid>
        for (auto x : initial) {
            int fax = find(x, fa);
            if (!mp.count(fax)) mp[fax] = {1, x};
            else {
                mp[fax] = {mp[fax].first+1, mp[fax].second};
            }
        }
        
        int res = -1, maxcnt = 0;
        for (auto &[fax, pii] : mp) {
            auto [cnt, id] = pii; 
            if (cnt == 1 && (-fa[fax] > maxcnt || -fa[fax] == maxcnt && res > id)) {
                maxcnt = -fa[fax];
                res = id;
            }
        }
        return maxcnt == 0 ? initial[0] : res;
    }
    
    int find(int x, vector<int> &fa) {
        return fa[x] < 0 ? x : (fa[x] = find(fa[x], fa));
    }
    
    void Union(int x, int y, vector<int> &fa) {
        int fax = find(x, fa);
        int fay = find(y, fa);
        if (fax != fay) {
            fa[fay] += fa[fax];
            fa[fax] = fay;
        }
    }
};